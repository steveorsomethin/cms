#!/usr/bin/env node
'use strict';

var util = require('util'),
	fs = require('fs'),
	async = require('async'),
	request = require('request'),
	_ = require('underscore');

var port = 8089,
	baseUrl = 'http://localhost:' + port.toString() + '/services',
	uuidRegex = /[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/g,
	uuidReplacement = '00000000-0000-0000-0000-000000000000',
	schemaUriRegex = /"schemaUri":"urn:[a-zA-Z0-9]+#/g,
	schemaUriReplacement = '"schemaUri":"urn:SCHEMAURIPLACEHOLDER#';

var testResults = {};

//HTTP status codes
var OK = 200,
	CREATED = 201,
	ACCEPTED = 202,
	NO_CONTENT = 204,
	BAD_REQUEST = 400,
	UNAUTHORIZED = 401,
	FORBIDDEN = 403,
	NOT_FOUND = 404;

var expectResponse = function(testName, statusCode, callback, predicate) {
	return function(error, response, body) {
		var failure,
			jsonBody = typeof body === 'string' ? body : JSON.stringify(body),
			bodyMatches = !predicate || predicate.call(this, jsonBody);
		if (error || response.statusCode !== statusCode || !bodyMatches) {
			failure = {
				messages: ['Failed to get expected response']
			};

			if (error) {
				failure.error = error;
			} else {
				if (response.statusCode !== statusCode) {
					failure.messages.push(util.format('Expected status %d but saw %d', statusCode, response.statusCode));
				}
				if (!bodyMatches) {
					failure.messages.push(util.format('Got unexpected response body %s', jsonBody));
				}
			}
		}

		testResults[testName] = 
			failure ? '\u001b[31mFAILED:\u001b[0m ' + JSON.stringify(failure) : '\u001b[32mPASSED\u001b[0m';
		
		callback;
	};
};

var 
	//Document Types
	createDocumentType = function(documentType, callback) {
		var opt = {method: 'PUT', uri: baseUrl + '/documentTypes', json: documentType};
		request(opt, callback);
	},
	readDocumentType = function(name, callback) {
		var opt = {
			method: 'GET', 
			uri: util.format('%s/documentTypes/%s', baseUrl, name), 
			headers: {'Accept': 'application/json'}
		};
		request(opt, callback);
	},
	updateDocumentType = function(documentType, callback) {
		var opt = {method: 'POST', uri: baseUrl + '/documentTypes', json: documentType};
		request(opt, callback);
	},
	deleteDocumentType = function(name, callback) {
		var opt = {method: 'DELETE', uri: util.format('%s/documentTypes/%s', baseUrl, name)};
		request(opt, callback);
	},
	//Documents
	createDocument = function(document, callback) {
		var opt = {method: 'PUT', uri: baseUrl + '/documents', json: document};
		request(opt, callback);
	},
	readDocument = function(name, callback) {
		var opt = {
			method: 'GET',
			uri: util.format('%s/documents/%s', baseUrl, name),
			headers: {'Accept': 'application/json'}
		};
		request(opt, callback);
	},
	updateDocument = function(document, callback) {
		var opt = {method: 'POST', uri: baseUrl + '/documents', json: document};
		request(opt, callback);
	},
	deleteDocument = function(name, callback) {
		var opt = {method: 'DELETE', uri: util.format('%s/documents/%s', baseUrl, name)};
		request(opt, callback);
	},
	//Templates
	createTemplate = function(template, callback) {
		var opt = {method: 'PUT', uri: baseUrl + '/templates', json: template};
		request(opt, callback);
	},
	readTemplate = function(name, callback) {
		var opt = {
			method: 'GET',
			uri: util.format('%s/templates/%s', baseUrl, name),
			headers: {'Accept': 'application/json'}
		};
		request(opt, callback);
	},
	updateTemplate = function(template, callback) {
		var opt = {method: 'POST', uri: baseUrl + '/templates', json: template};
		request(opt, callback);
	},
	deleteTemplate = function(name, callback) {
		var opt = {method: 'DELETE', uri: util.format('%s/templates/%s', baseUrl, name)};
		request(opt, callback);
	},
	//Pages
	createPage = function(page, callback) {
		var opt = {method: 'PUT', uri:  baseUrl + '/pages', json: page};
		request(opt, callback);
	},
	readPage = function(name, callback) {
		var opt = {
			method: 'GET',
			uri: util.format('%s/pages/%s', baseUrl, name),
			headers: {'Accept': 'application/json'}
		};
		request(opt, callback);
	},
	updatePage = function(page, callback) {
		var opt = {method: 'POST', uri: baseUrl + '/pages', json: page};
		request(opt, callback);
	},
	deletePage = function(name, callback) {
		var opt = {method: 'DELETE', uri: util.format('%s/pages/%s', baseUrl, name)};
		request(opt, callback);
	};

var standardCallback = function(callback) {
	return function(error, response, body) {
		if (error) {
			return callback(error);
		} else {
			return callback(null, body);
		}
	};
};

//TODO: Find a way to collapse a lot of test duplication, and get rid of this
var createPageBase = function(callback) {
	var name = this.name,
		layoutBody = fs.readFileSync(__dirname + '/mock/pages/layout.dust').toString(),
		layout = _.clone(require('./mock/pages/layout.json')),
		documentType = _.clone(require('./mock/documentTypes/valid.json')),
		leftColumnBody = fs.readFileSync(__dirname + '/mock/pages/leftColumn.dust').toString(),
		leftColumn = _.clone(require('./mock/templates/valid.json')),
		rightColumnBody = fs.readFileSync(__dirname + '/mock/pages/rightColumn.dust').toString(),
		rightColumn = _.clone(require('./mock/templates/valid.json')),
		page = _.clone(require('./mock/pages/valid.json'));

	documentType.id = name + 'DocumentType';
	documentType.name = documentType.id;

	leftColumn.id = name + 'LeftColumnTemplate';
	leftColumn.name = leftColumn.id;
	leftColumn.documentType = documentType.name;
	leftColumn.body = leftColumnBody;

	rightColumn.id = name + 'RightColumnTemplate';
	rightColumn.name = rightColumn.id;
	rightColumn.documentType = documentType.name;
	rightColumn.body = rightColumnBody;

	layout.id = name + 'LayoutTemplate';
	layout.name = layout.id;
	layout.documentType = documentType.name;
	layout.body = layoutBody;

	page.id = name + 'Page';
	page.name = page.id;
	page.layout = layout.name;
	page.sections[0].filter.documentType = documentType.name;
	page.sections[0].template = leftColumn.name;
	page.sections[1].filter.documentType = documentType.name;
	page.sections[1].template = rightColumn.name;

	async.waterfall([
		function(callback) {
			createDocumentType(documentType, standardCallback(callback));
		},
		function(createdDocumentType, callback) {
			createTemplate(leftColumn, standardCallback(callback));
		},
		function(createdTemplate, callback) {
			createTemplate(rightColumn, standardCallback(callback));
		},
		function(createdTemplate, callback) {
			createTemplate(layout, standardCallback(callback));
		},
		function(createdTemplate, callback) {
			createPage(page, callback);
		}
	], callback.bind({page: page}));
};

var tests = {

	/*****************************************************************************
	* Document types
	*****************************************************************************/
	createDocumentTypeSuccess: function(callback) {
		var documentType = _.clone(require('./mock/documentTypes/valid.json')),
			expected = expectResponse(this.name, CREATED, callback, function(body) {
				return body === JSON.stringify(documentType);
			});

		documentType.id = this.name;
		documentType.name = this.name;

		createDocumentType(documentType, expected);
	},
	createDocumentTypeInvalid: function(callback) {
		var documentType = _.clone(require('./mock/documentTypes/invalid.json')),
			error400 = require('./mock/documentTypes/error400.json'),
			expected = expectResponse(this.name, BAD_REQUEST, callback, function(body) {
				body = body.replace(uuidRegex, uuidReplacement).replace(schemaUriRegex, schemaUriReplacement);
				return body === JSON.stringify(error400);
			});

		documentType.id = this.name;
		documentType.name = this.name;

		createDocumentType(documentType, expected);
	},
	readDocumentTypeSuccess: function(callback) {
		var name = this.name,
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			expected = expectResponse(name, OK, callback, function(body) {
				return _.isEqual(JSON.parse(body), documentType);
			});

		documentType.id = name;
		documentType.name = name;

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				readDocumentType(name, callback);
			}
		], expected);
	},
	readDocumentTypeNotFound: function(callback) {
		var name = this.name,
			error404 = require('./mock/documentTypes/error404.json'),
			expected = expectResponse(name, NOT_FOUND, callback, function(body) {
				return body.replace(name, 'DOCUMENTTYPEPLACEHOLDER') === JSON.stringify(error404);
			});

		readDocumentType(name, expected);
	},
	updateDocumentTypeSuccess: function(callback) {
		var name = this.name,
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			expected = expectResponse(name, ACCEPTED, callback, function(body) {
				return _.isEqual(JSON.parse(body), documentType);
			});

		documentType.id = name;
		documentType.name = name;

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				createdDocumentType.additionalProperties = true;
				documentType.additionalProperties = true;
				updateDocumentType(createdDocumentType, callback);
			}
		], expected);
	},
	updateDocumentTypeInvalid: function(callback) {
		var name = this.name,
			validDocumentType = _.clone(require('./mock/documentTypes/valid.json')),
			invalidDocumentType = _.clone(require('./mock/documentTypes/invalid.json')),
			error400 = require('./mock/documentTypes/error400.json'),
			expected = expectResponse(name, BAD_REQUEST, callback, function(body) {
				body = body.replace(uuidRegex, uuidReplacement).replace(schemaUriRegex, schemaUriReplacement);
				return body === JSON.stringify(error400);
			});

		validDocumentType.id = name;
		validDocumentType.name = name;
		invalidDocumentType.id = name;
		invalidDocumentType.name = name;

		async.waterfall([
			function(callback) {
				createDocumentType(validDocumentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				updateDocumentType(invalidDocumentType, callback);
			}
		], expected);
	},
	deleteDocumentTypeSuccess: function(callback) {
		var name = this.name,
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			expected = expectResponse(name, NO_CONTENT, callback);

		documentType.id = name;
		documentType.name = name;

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				deleteDocumentType(name, callback);
			}
		], expected);
	},

	/*****************************************************************************
	* Documents
	*****************************************************************************/
	createDocumentSuccess: function(callback) {
		var document,
			name = this.name,
			documentBody = _.clone(require('./mock/documents/valid.json')),
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			expected = expectResponse(name, CREATED, callback, function(body) {
				return body === JSON.stringify(document);
			});

		documentType.id = name;
		documentType.name = name;
		document = {
			id: name + 'Instance',
			name: name + 'Instance',
			documentType: name,
			tags: [],
			body: documentBody
		};

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				createDocument(document, callback);
			}
		], expected);
	},
	createDocumentInvalid: function(callback) {
		var document,
			name = this.name,
			documentBody = _.clone(require('./mock/documents/invalid.json')),
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			error400 = require('./mock/documents/error400.json'),
			expected = expectResponse(name, BAD_REQUEST, callback, function(body) {
				body = body.replace(uuidRegex, uuidReplacement).replace(schemaUriRegex, schemaUriReplacement);
				return _.isEqual(JSON.parse(body), error400);
			});

		documentType.id = name;
		documentType.name = name;
		document = {
			id: name + 'Instance',
			name: name + 'Instance',
			documentType: name,
			tags: [],
			body: documentBody
		};

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				createDocument(document, callback);
			}
		], expected);
	},
	createDocumentDocumentTypeNotFound: function(callback) {
		var document,
			name = this.name,
			documentBody = _.clone(require('./mock/documents/valid.json')),
			error404 = require('./mock/documentTypes/error404.json'),
			expected = expectResponse(name, NOT_FOUND, callback, function(body) {
				return body.replace(name, 'DOCUMENTTYPEPLACEHOLDER') === JSON.stringify(error404);
			});

		document = {
			id: name + 'Instance',
			name: name + 'Instance',
			documentType: name,
			tags: [],
			body: documentBody
		};

		createDocument(document, expected);
	},
	readDocumentSuccess: function(callback) {
		var document,
			name = this.name,
			documentBody = _.clone(require('./mock/documents/valid.json')),
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			expected = expectResponse(name, OK, callback, function(body) {
				return _.isEqual(JSON.parse(body), document);
			});

		documentType.id = name;
		documentType.name = name;
		document = {
			id: name + 'Instance',
			name: name + 'Instance',
			documentType: name,
			tags: [],
			body: documentBody
		};

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				createDocument(document, standardCallback(callback));
			},
			function(createdDocument, callback) {
				readDocument(document.name, callback);
			}
		], expected);
	},
	readDocumentNotFound: function(callback) {
		var name = this.name,
			documentName = name + 'Instance',
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			error404 = require('./mock/documents/error404.json'),
			expected = expectResponse(name, NOT_FOUND, callback, function(body) {
				return body.replace(documentName, 'testName') === JSON.stringify(error404);
			});

		documentType.id = name;
		documentType.name = name;

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				readDocument(documentName, callback);
			}
		], expected);
	},
	updateDocumentSuccess: function(callback) {
		var document,
			name = this.name,
			documentBody = _.clone(require('./mock/documents/valid.json')),
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			expected = expectResponse(name, ACCEPTED, callback, function(body) {
				return _.isEqual(JSON.parse(body), document);
			});

		documentType.id = name;
		documentType.name = name;
		document = {
			id: name + 'Instance',
			name: name + 'Instance',
			documentType: name,
			tags: [],
			body: documentBody
		};

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				createDocument(document, standardCallback(callback));
			},
			function(createdDocument, callback) {
				updateDocument(createdDocument, callback);
			}
		], expected);
	},
	updateDocumentInvalid: function(callback) {
		var document,
			name = this.name,
			validDocumentBody = _.clone(require('./mock/documents/valid.json')),
			invalidDocumentBody = _.clone(require('./mock/documents/invalid.json')),
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			error400 = require('./mock/documents/error400.json'),
			expected = expectResponse(name, BAD_REQUEST, callback, function(body) {
				body = body.replace(uuidRegex, uuidReplacement).replace(schemaUriRegex, schemaUriReplacement);
				return _.isEqual(JSON.parse(body), error400);
			});

		documentType.id = name;
		documentType.name = name;
		document = {
			id: name + 'Instance',
			name: name + 'Instance',
			documentType: name,
			tags: [],
			body: validDocumentBody
		};

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				createDocument(document, standardCallback(callback));
			},
			function(createdDocument, callback) {
				document.body = invalidDocumentBody;
				updateDocument(document, callback);
			}
		], expected);
	},
	updateDocumentDocumentTypeNotFound: function(callback) {
		var document,
			name = this.name,
			documentBody = _.clone(require('./mock/documents/invalid.json')),
			error404 = require('./mock/documentTypes/error404.json'),
			expected = expectResponse(name, NOT_FOUND, callback, function(body) {
				return body.replace(name, 'DOCUMENTTYPEPLACEHOLDER') === JSON.stringify(error404);
			});

		document = {
			id: name + 'Instance',
			name: name + 'Instance',
			documentType: name,
			tags: [],
			body: documentBody
		};

		updateDocument(document, expected);
	},
	deleteDocumentSuccess: function(callback) {
		var name = this.name,
			document = _.clone(require('./mock/documents/valid.json')),
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			expected = expectResponse(name, NO_CONTENT, callback);

		documentType.id = name;
		documentType.name = name;
		document.id = name + 'Instance';

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				createDocument(document, standardCallback(callback));
			},
			function(createdDocument, callback) {
				deleteDocument(document.name, callback);
			}
		], expected);
	},

	/*****************************************************************************
	* Templates
	*****************************************************************************/
	createTemplateSuccess: function(callback) {
		var name = this.name,
			templateBody = fs.readFileSync(__dirname + '/mock/templates/template.dust').toString(),
			template = _.clone(require('./mock/templates/valid.json')),
			documentType = _.clone(require('./mock/documentTypes/valid.json'));

		documentType.id = name;
		documentType.name = name;
		template.id = name + 'Template';
		template.name = template.id;
		template.body = templateBody;
		template.documentType = name;

		var expected = expectResponse(name, CREATED, callback, function(body) {
			return _.isEqual(JSON.parse(body), template);
		});

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				createTemplate(template, callback);
			}
		], expected);
	},
	createTemplateInvalid: function(callback) {
		var name = this.name,
			template = _.clone(require('./mock/templates/invalid.json')),
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			error400 = _.clone(require('./mock/templates/error400.json')),
			expected = expectResponse(name, BAD_REQUEST, callback, function(body) {
				body = body.replace(uuidRegex, uuidReplacement).replace(schemaUriRegex, schemaUriReplacement);
				return _.isEqual(JSON.parse(body), error400);
			});

		documentType.id = name;
		documentType.name = name;
		template.id = name + 'Template';
		template.name = template.id;
		template.documentType = name;

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				createTemplate(template, callback);
			}
		], expected);
	},
	createTemplateDocumentTypeNotFound: function(callback) {
		var name = this.name,
			template = _.clone(require('./mock/templates/valid.json')),
			error404 = _.clone(require('./mock/documentTypes/error404.json')),

			expected = expectResponse(name, NOT_FOUND, callback, function(body) {
				return body.replace(name, 'DOCUMENTTYPEPLACEHOLDER') === JSON.stringify(error404);
			});

			template.name = name + 'Template';

		createTemplate(template, expected);
	},
	readTemplateSuccess: function(callback) {
		var name = this.name,
			templateBody = fs.readFileSync(__dirname + '/mock/templates/template.dust').toString(),
			template = _.clone(require('./mock/templates/valid.json')),
			documentType = _.clone(require('./mock/documentTypes/valid.json'));

		documentType.id = name;
		documentType.name = name;
		template.name = name + 'Template';
		template.body = templateBody;

		var expected = expectResponse(name, OK, callback, function(body) {
			return _.isEqual(JSON.parse(body), template);
		});

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				createTemplate(template, standardCallback(callback));
			},
			function(createdDocument, callback) {
				readTemplate(template.name, callback);
			}
		], expected);
	},
	readTemplateNotFound: function(callback) {
		var name = this.name,
			templateName = name + 'Template',
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			error404 = _.clone(require('./mock/templates/error404.json')),
			expected = expectResponse(name, NOT_FOUND, callback, function(body) {
				return body.replace(templateName, 'testName') === JSON.stringify(error404);
			});

		documentType.id = name;
		documentType.name = name;

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				readTemplate(templateName, callback);
			}
		], expected);
	},
	updateTemplateSuccess: function(callback) {
		var name = this.name,
			templateBody = fs.readFileSync(__dirname + '/mock/templates/template.dust').toString(),
			template = _.clone(require('./mock/templates/valid.json')),
			documentType = _.clone(require('./mock/documentTypes/valid.json'));

		documentType.id = name;
		documentType.name = name;
		template.id = name + 'Template';
		template.name = template.id;
		template.body = templateBody;
		template.documentType = name;

		var expected = expectResponse(name, ACCEPTED, callback, function(body) {
			return _.isEqual(JSON.parse(body), template);
		});

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				createTemplate(template, standardCallback(callback));
			},
			function(createdTemplate, callback) {
				createdTemplate.isArray = true;
				template.isArray = true;
				updateTemplate(createdTemplate, callback);
			}
		], expected);
	},
	updateTemplateInvalid: function(callback) {
		var name = this.name,
			templateBody = fs.readFileSync(__dirname + '/mock/templates/template.dust').toString(),
			validTemplate = _.clone(require('./mock/templates/valid.json')),
			invalidTemplate = _.clone(require('./mock/templates/invalid.json')),
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			error400 = _.clone(require('./mock/templates/error400.json')),
			expected = expectResponse(name, BAD_REQUEST, callback, function(body) {
				body = body.replace(uuidRegex, uuidReplacement).replace(schemaUriRegex, schemaUriReplacement);
				return _.isEqual(JSON.parse(body), error400);
			});

		documentType.id = name;
		documentType.name = name;
		validTemplate.id = name + 'Template';
		validTemplate.name = validTemplate.id;
		validTemplate.body = templateBody;
		validTemplate.documentType = name;
		invalidTemplate.id = validTemplate.id;
		invalidTemplate.name = validTemplate.name;
		invalidTemplate.documentType = name;

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				createTemplate(validTemplate, standardCallback(callback));
			},
			function(createdTemplate, callback) {
				updateTemplate(invalidTemplate, callback);
			}
		], expected);
	},
	updateTemplateDocumentTypeNotFound: function(callback) {
		var name = this.name,
			template = _.clone(require('./mock/templates/valid.json')),
			error404 = _.clone(require('./mock/documentTypes/error404.json')),

			expected = expectResponse(name, NOT_FOUND, callback, function(body) {
				return body.replace(name, 'DOCUMENTTYPEPLACEHOLDER') === JSON.stringify(error404);
			});

			template.name = name + 'Template';

		updateTemplate(template, expected);
	},
	deleteTemplateSuccess: function(callback) {
		var name = this.name,
			templateBody = fs.readFileSync(__dirname + '/mock/templates/template.dust').toString(),
			template = _.clone(require('./mock/templates/valid.json')),
			documentType = _.clone(require('./mock/documentTypes/valid.json')),
			expected = expectResponse(name, NO_CONTENT, callback);

		documentType.id = name;
		documentType.name = name;
		template.name = name + 'Template';
		template.body = templateBody;

		async.waterfall([
			function(callback) {
				createDocumentType(documentType, standardCallback(callback));
			},
			function(createdDocumentType, callback) {
				createTemplate(template, standardCallback(callback));
			},
			function(createdDocument, callback) {
				deleteTemplate(template.name, callback);
			}
		], expected);
	},

	/*****************************************************************************
	* Pages
	*****************************************************************************/
	createPageSuccess: function(callback) {
		var expected = expectResponse(this.name, CREATED, callback, function(body) {
			return _.isEqual(JSON.parse(body), this.page);
		});

		createPageBase.call(this, expected);
	},
	renderPageSuccess: function(callback) {
		callback();
		//createPage.call(this, callback);
	}
};

//TODO: Fork a process to isolate log events instead of printing them in this context
require('../server/application').run(port);

//Run tests
async.parallel((function() {
	var tasks = [];
	for (var key in tests) {
		(function(key) {
			tasks.push(function(callback) {
				var task = tests[key].bind({name: key});
				task(callback);
				setTimeout(function() {
					if (!testResults[key]) {
						callback(util.format('Test "%s" timed out after 10s\n', key));
					}
				}, 10000);
			});
		})(key);
	}
	return tasks;
})(), function(error, result) {
	if (error) {
		console.log(error);
	}
	for (var key in testResults) {
		console.log(util.format('Test %s: %s', key, testResults[key]));
	}
	process.exit();
});

