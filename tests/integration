#!/usr/bin/env node
'use strict';

var util = require('util'),
	uuid = require('node-uuid'),
	async = require('async'),
	request = require('request');

var baseUrl = "http://localhost:8080";

var testResults = {};

var expectResponse = function(testName, statusCode, responseBody, callback) {
	var newLine = '\n    ';
	return function(error, response, body) {
		var failure,
			jsonBody = typeof body === 'string' ? body : JSON.stringify(body),
			bodyMatches = !responseBody || jsonBody === responseBody;
		if (error || response.statusCode !== statusCode || !bodyMatches) {
			failure = 'Failed to get expected response';
			if (error) {
				failure += util.format('%sGot error: %s%s%s', newLine, newLine, error, newLine);
			} else {
				if (response.statusCode !== statusCode) {
					failure += util.format('%sExpected status %d but saw %d', newLine, statusCode, response.statusCode);
				}
				if (responseBody) {
					failure += util.format('%sExpected body %s%s%s but saw %s%s%s', 
						newLine, newLine, responseBody, newLine, newLine, jsonBody, newLine);
				}
			}
		}

		testResults[testName] = failure ? failure : 'SUCCESS';
		callback();
	};
};

var createDocumentType = function(name, documentType, callback) {
		var opt = {method: 'PUT', uri: baseUrl + '/documentTypes/' + name, json: documentType};
		request(opt, callback);
	},
	readDocumentType = function(name, callback) {
		var opt = {
			method: 'GET', 
			uri: baseUrl + '/documentTypes/' + name, 
			headers: {'Accept': 'application/json'}
		};
		request(baseUrl + '/documentTypes/' + name, callback);
	};

//TODO: Make error output deterministic so we can test them as well
var tests = {
	createDocumentTypeSuccess: function(callback) {
		var documentName = this.name,
			documentType = require('./mock/documentTypes/valid.json'),
			expected = expectResponse(this.name, 201, JSON.stringify(documentType), callback);

		createDocumentType(documentName, documentType, expected);
	},
	createDocumentTypeInvalidFailure: function(callback) {
		var documentName = this.name,
			documentType = require('./mock/documentTypes/invalid.json'),
			expected = expectResponse(this.name, 400, null, callback);

		createDocumentType(documentName, documentType, expected);
	},
	readDocumentTypeSuccess: function(callback) {
		var documentName = this.name,
			documentType = require('./mock/documentTypes/valid.json'),
			expected = expectResponse(this.name, 200, JSON.stringify(documentType), callback);

		createDocumentType(documentName, documentType, function(error, result) {
			readDocumentType(documentName, expected);
		});
	}
};

//TODO: Fork a process to isolate log events instead of printing them in this context
require("../server/application").run();

//Run tests
async.parallel((function() {
	var tasks = [];
	for (var key in tests) {
		tasks.push(tests[key].bind({name: key}));
	}
	return tasks;
})(), function(error, result) {
	if (error) {
		console.log(error);
	}
	console.log(testResults);
	process.exit();
});

