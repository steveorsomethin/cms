#!/usr/bin/env node
'use strict';

var util = require('util'),
	fs = require('fs'),
	uuid = require('node-uuid'),
	async = require('async'),
	request = require('request');

var baseUrl = 'http://localhost:8080',
	uuidRegex = /[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/g,
	uuidReplacement = '00000000-0000-0000-0000-000000000000';
var testResults = {};

//HTTP status codes
var OK = 200,
	CREATED = 201,
	ACCEPTED = 202,
	NO_CONTENT = 204,
	BAD_REQUEST = 400,
	UNAUTHORIZED = 401,
	FORBIDDEN = 403,
	NOT_FOUND = 404;

var expectResponse = function(testName, statusCode, callback, predicate) {
	return function(error, response, body) {
		var failure,
			jsonBody = typeof body === 'string' ? body : JSON.stringify(body),
			bodyMatches = !predicate || predicate(jsonBody);
		if (error || response.statusCode !== statusCode || !bodyMatches) {
			failure = {
				messages: ['Failed to get expected response']
			};

			if (error) {
				failure.error = error;
			} else {
				if (response.statusCode !== statusCode) {
					failure.messages.push(util.format('Expected status %d but saw %d', statusCode, response.statusCode));
				}
				if (!bodyMatches) {
					failure.messages.push(util.format('Got unexpected response body %s', jsonBody));
				}
			}
		}

		testResults[testName] = failure ? failure : 'PASSED';
		callback();
	};
};

var 
	//Document Types
	createDocumentType = function(name, documentType, callback) {
		var opt = {method: 'PUT', uri: baseUrl + '/documentTypes/' + name, json: documentType};
		request(opt, callback);
	},
	readDocumentType = function(name, callback) {
		var opt = {
			method: 'GET', 
			uri: baseUrl + '/documentTypes/' + name, 
			headers: {'Accept': 'application/json'}
		};
		request(opt, callback);
	},
	updateDocumentType = function(name, documentType, callback) {
		var opt = {method: 'POST', uri: baseUrl + '/documentTypes/' + name, json: documentType};
		request(opt, callback);
	},
	deleteDocumentType = function(name, callback) {
		var opt = {method: 'DELETE', uri: baseUrl + '/documentTypes/' + name};
		request(opt, callback);
	},
	//Documents
	createDocument = function(name, documentTypeName, document, callback) {
		var opt = {
			method: 'PUT',
			uri: util.format('%s/documentTypes/%s/documents/%s', baseUrl, documentTypeName, name),
			json: document
		};
		request(opt, callback);
	},
	readDocument = function(name, documentTypeName, callback) {
		var opt = {
			method: 'GET',
			uri: util.format('%s/documentTypes/%s/documents/%s', baseUrl, documentTypeName, name),
			headers: {'Accept': 'application/json'}
		};
		request(opt, callback);
	},
	updateDocument = function(name, documentTypeName, document, callback) {
		var opt = {
			method: 'POST',
			uri: util.format('%s/documentTypes/%s/documents/%s', baseUrl, documentTypeName, name),
			json: document
		};
		request(opt, callback);
	},
	deleteDocument = function(name, documentTypeName, callback) {
		var opt = {
			method: 'DELETE',
			uri: util.format('%s/documentTypes/%s/documents/%s', baseUrl, documentTypeName, name)
		};
		request(opt, callback);
	},
	//Templates
	createTemplate = function(name, documentTypeName, template, callback) {
		var opt = {
			method: 'PUT',
			uri: util.format('%s/documentTypes/%s/templates/%s', baseUrl, documentTypeName, name),
			json: template
		};
		request(opt, callback);
	},
	readTemplate = function(name, documentTypeName, callback) {
		var opt = {
			method: 'GET',
			uri: util.format('%s/documentTypes/%s/templates/%s', baseUrl, documentTypeName, name)
		};
		request(opt, callback);
	},
	updateTemplate = function(name, documentTypeName, template, callback) {
		var opt = {
			method: 'POST',
			uri: util.format('%s/documentTypes/%s/templates/%s', baseUrl, documentTypeName, name),
			json: template
		};
		request(opt, callback);
	},
	deleteTemplate = function(name, documentTypeName, callback) {
		var opt = {
			method: 'DELETE',
			uri: util.format('%s/documentTypes/%s/templates/%s', baseUrl, documentTypeName, name)
		};
		request(opt, callback);
	};

var tests = {

	/*****************************************************************************
	* Document types
	*****************************************************************************/
	createDocumentTypeSuccess: function(callback) {
		var documentType = require('./mock/documentTypes/valid.json'),
			expected = expectResponse(this.name, CREATED, callback, function(body) {
				return body === JSON.stringify(documentType);
			});

		createDocumentType(this.name, documentType, expected);
	},
	createDocumentTypeInvalid: function(callback) {
		var documentType = require('./mock/documentTypes/invalid.json'),
			error400 = require('./mock/documentTypes/error400.json'),
			expected = expectResponse(this.name, BAD_REQUEST, callback, function(body) {
				return body.replace(uuidRegex, uuidReplacement) === JSON.stringify(error400);
			});

		createDocumentType(this.name, documentType, expected);
	},
	readDocumentTypeSuccess: function(callback) {
		var name = this.name,
			documentType = require('./mock/documentTypes/valid.json'),
			expected = expectResponse(name, OK, callback, function(body) {
				return body === JSON.stringify(documentType);
			});

		async.waterfall([
			function(callback) {
				createDocumentType(name, documentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocumentType, callback) {
				readDocumentType(name, callback);
			}
		], expected);
	},
	readDocumentTypeNotFound: function(callback) {
		var name = this.name,
			error404 = require('./mock/documentTypes/error404.json'),
			expected = expectResponse(name, NOT_FOUND, callback, function(body) {
				return body.replace(name, 'testName') === JSON.stringify(error404);
			});

		readDocumentType(name, expected);
	},
	updateDocumentTypeSuccess: function(callback) {
		var name = this.name,
			documentType = require('./mock/documentTypes/valid.json'),
			expected = expectResponse(name, ACCEPTED, callback, function(body) {
				return body === JSON.stringify(documentType);
			});

		async.waterfall([
			function(callback) {
				createDocumentType(name, documentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocumentType, callback) {
				updateDocumentType(name, createdDocumentType, callback);
			}
		], expected);
	},
	updateDocumentTypeInvalid: function(callback) {
		var name = this.name,
			validDocumentType = require('./mock/documentTypes/valid.json'),
			invalidDocumentType = require('./mock/documentTypes/invalid.json'),
			error400 = require('./mock/documentTypes/error400.json'),
			expected = expectResponse(name, BAD_REQUEST, callback, function(body) {
				return body.replace(uuidRegex, uuidReplacement) === JSON.stringify(error400);
			});

		async.waterfall([
			function(callback) {
				createDocumentType(name, validDocumentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocumentType, callback) {
				updateDocumentType(name, invalidDocumentType, callback);
			}
		], expected);
	},
	deleteDocumentTypeSuccess: function(callback) {
		var name = this.name,
			documentType = require('./mock/documentTypes/valid.json'),
			expected = expectResponse(name, NO_CONTENT, callback);

		async.waterfall([
			function(callback) {
				createDocumentType(name, documentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocumentType, callback) {
				deleteDocumentType(name, callback);
			}
		], expected);
	},

	/*****************************************************************************
	* Documents
	*****************************************************************************/
	createDocumentSuccess: function(callback) {
		var name = this.name,
			document = require('./mock/documents/valid.json'),
			documentType = require('./mock/documentTypes/valid.json'),
			expected = expectResponse(name, CREATED, callback, function(body) {
				return body === JSON.stringify(document);
			});

		async.waterfall([
			function(callback) {
				createDocumentType(name, documentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocumentType, callback) {
				createDocument(name + "Instance", name, document, callback);
			}
		], expected);
	},
	createDocumentInvalid: function(callback) {
		var name = this.name,
			document = require('./mock/documents/invalid.json'),
			documentType = require('./mock/documentTypes/valid.json'),
			error400 = require('./mock/documents/error400.json'),
			expected = expectResponse(name, BAD_REQUEST, callback, function(body) {
				return body.replace(uuidRegex, uuidReplacement) === JSON.stringify(error400);
			});

		async.waterfall([
			function(callback) {
				createDocumentType(name, documentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocumentType, callback) {
				createDocument(name + "Instance", name, document, callback);
			}
		], expected);
	},
	createDocumentDocumentTypeNotFound: function(callback) {
		var name = this.name,
			document = require('./mock/documents/invalid.json'),
			error404 = require('./mock/documentTypes/error404.json'),
			expected = expectResponse(name, NOT_FOUND, callback, function(body) {
				return body.replace(name, 'testName') === JSON.stringify(error404);
			});

		createDocument(name + "Instance", name, document, expected);
	},
	readDocumentSuccess: function(callback) {
		var name = this.name,
			document = require('./mock/documents/valid.json'),
			documentType = require('./mock/documentTypes/valid.json'),
			expected = expectResponse(name, OK, callback, function(body) {
				return body === JSON.stringify(document);
			});

		async.waterfall([
			function(callback) {
				createDocumentType(name, documentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocumentType, callback) {
				createDocument(name + "Instance", name, document, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocument, callback) {
				readDocument(name + "Instance", name, callback);
			}
		], expected);
	},
	readDocumentNotFound: function(callback) {
		var name = this.name,
			documentName = name + "Instance",
			documentType = require('./mock/documentTypes/valid.json'),
			error404 = require('./mock/documents/error404.json'),
			expected = expectResponse(name, NOT_FOUND, callback, function(body) {
				return body.replace(documentName, 'testName') === JSON.stringify(error404);
			});

		async.waterfall([
			function(callback) {
				createDocumentType(name, documentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocument, callback) {
				readDocument(documentName, name, callback);
			}
		], expected);
	},
	updateDocumentSuccess: function(callback) {
		var name = this.name,
			document = require('./mock/documents/valid.json'),
			documentType = require('./mock/documentTypes/valid.json'),
			expected = expectResponse(name, ACCEPTED, callback, function(body) {
				return body === JSON.stringify(document);
			});

		async.waterfall([
			function(callback) {
				createDocumentType(name, documentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocumentType, callback) {
				createDocument(name + "Instance", name, document, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocument, callback) {
				updateDocument(name + "Instance", name, createdDocument, callback);
			}
		], expected);
	},
	updateDocumentInvalid: function(callback) {
		var name = this.name,
			document = require('./mock/documents/valid.json'),
			invalidDocument = require('./mock/documents/invalid.json'),
			documentType = require('./mock/documentTypes/valid.json'),
			error400 = require('./mock/documents/error400.json'),
			expected = expectResponse(name, BAD_REQUEST, callback, function(body) {
				return body.replace(uuidRegex, uuidReplacement) === JSON.stringify(error400);
			});

		async.waterfall([
			function(callback) {
				createDocumentType(name, documentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocumentType, callback) {
				createDocument(name + "Instance", name, document, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocument, callback) {
				updateDocument(name + "Instance", name, invalidDocument, callback);
			}
		], expected);
	},
	updateDocumentDocumentTypeNotFound: function(callback) {
		var name = this.name,
			document = require('./mock/documents/invalid.json'),
			error404 = require('./mock/documentTypes/error404.json'),
			expected = expectResponse(name, NOT_FOUND, callback, function(body) {
				return body.replace(name, 'testName') === JSON.stringify(error404);
			});

		updateDocument(name + "Instance", name, document, expected);
	},
	deleteDocumentSuccess: function(callback) {
		var name = this.name,
			document = require('./mock/documents/valid.json'),
			documentType = require('./mock/documentTypes/valid.json'),
			expected = expectResponse(name, NO_CONTENT, callback);

		async.waterfall([
			function(callback) {
				createDocumentType(name, documentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocumentType, callback) {
				createDocument(name + "Instance", name, document, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocument, callback) {
				deleteDocument(name + "Instance", name, callback);
			}
		], expected);
	},

	/*****************************************************************************
	* Templates
	*****************************************************************************/
	createTemplateSuccess: function(callback) {
		var name = this.name,
			template = fs.readFileSync(__dirname + '/mock/templates/valid.dust').toString(),
			documentType = require('./mock/documentTypes/valid.json'),
			expected = expectResponse(name, CREATED, callback, function(body) {
				return body === template;
			});

		async.waterfall([
			function(callback) {
				createDocumentType(name, documentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocumentType, callback) {
				createTemplate(name + "Template", name, template, callback);
			}
		], expected);
	},
	/*createTemplateInvalid: function(callback) {
		var name = this.name,
			document = require('./mock/documents/invalid.json'),
			documentType = require('./mock/documentTypes/valid.json'),
			error400 = require('./mock/documents/error400.json'),
			expected = expectResponse(name, BAD_REQUEST, callback, function(body) {
				return body.replace(uuidRegex, uuidReplacement) === JSON.stringify(error400);
			});

		async.waterfall([
			function(callback) {
				createDocumentType(name, documentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocumentType, callback) {
				createDocument(name + "Instance", name, document, callback);
			}
		], expected);
	},
	createTemplateDocumentTypeNotFound: function(callback) {
		var name = this.name,
			document = require('./mock/documents/invalid.json'),
			error404 = require('./mock/documentTypes/error404.json'),
			expected = expectResponse(name, NOT_FOUND, callback, function(body) {
				return body.replace(name, 'testName') === JSON.stringify(error404);
			});

		createDocument(name + "Instance", name, document, expected);
	},*/
	readTemplateSuccess: function(callback) {
		var name = this.name,
			template = fs.readFileSync(__dirname + '/mock/templates/valid.dust').toString(),
			documentType = require('./mock/documentTypes/valid.json'),
			expected = expectResponse(name, OK, callback, function(body) {
				return JSON.parse(body) === template;
			});

		async.waterfall([
			function(callback) {
				createDocumentType(name, documentType, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocumentType, callback) {
				createTemplate(name + "Template", name, template, function(error, response, body) {
					if (error) {
						return callback(error);
					} else {
						return callback(null, body);
					}
				});
			},
			function(createdDocument, callback) {
				readTemplate(name + "Template", name, callback);
			}
		], expected);
	}
};

//TODO: Fork a process to isolate log events instead of printing them in this context
require("../server/application").run();

//Run tests
async.parallel((function() {
	var tasks = [];
	for (var key in tests) {
		tasks.push(tests[key].bind({name: key}));
	}
	return tasks;
})(), function(error, result) {
	if (error) {
		console.log(error);
	}
	console.log(testResults);
	process.exit();
});

